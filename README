                                 GLGS
                                 ====

Author: Jorge Acereda
Date: 2011-10-02 Sun


Table of Contents
=================
1 Purpose 
2 Building 
3 API 
4 Event types 
5 License 


1 Purpose 
----------
GLGS is a small screen/event handling library that provides a thin
layer abstracting the details of configuring the screen and handling
input. Sort of a simple GLUT/SDL.

2 Building 
-----------
As of now, the build scripts only work on Mac OS X.
* IOS 
  The following command should build the library and the examples and install them in the IOS simulator directory.
  
    ./mk-ios
* NPAPI 
  The following command should build the library and the examples and install them in the user's plugins directory.
  
    ./mk-npapi
  After building, try opening [file:testplugin.html]

3 API 
------
* unsigned gsWidth(); 
  Current screen width
* unsigned gsHeight(); 
  Current screen height
* int gsMouseX(); 
  Current X mouse position
* int gsMouseY(); 
  Current Y mouse position
* int gsPressed(gskey key); 
  True if key is currently pressed
* int gsReleased(gskey key); 
  True if key has been released
* int gsShowKeyboard(); 
  On platforms that support it, show the on-screen keyboard
* int gsHideKeyboard(); 
  On platforms that support it, hide the on-screen keyboard
* const char * gsResPath(); 
  Resources path
* intptr_t gsInject(gseventtype, intptr_t, intptr_t); 
  Inject an event, mostly internal
* void gsReportV(const char * fmt, va_list ap); 
  Report a message (depending on the platform, it might go to a file)
* void gsReport(const char * fmt, ...); 
  Report a message (depending on the platform, it might go to a file)
* int evType(const ev *); 
  Event type
* const char * evName(const ev *); 
  Event name
* int evWidth(const ev *); 
  Width for events of type
* int evHeight(const ev *); 
* gskey evWhich(const ev *); 
* intptr_t evArg0(const ev *); 
* intptr_t evArg1(const ev *); 
* int evX(const ev *); 
* int evY(const ev *); 
* int evArgC(const ev *); 
* char ** evArgV(const ev *); 
* const char * evKeyName(const ev *); 
* intptr_t event(const ev * e); 

4 Event types 
--------------
* GS_EVENT_NONE 
  Null event, must be ignored.
* GS_EVENT_INIT 
  Called upon initialization, no GL operations should be performed at this stage.
* GS_EVENT_TERM 
  Called befor terminating the application.
* GS_EVENT_GLINIT 
  The OpenGL context has been established. Might be called several times.
* GL_EVENT_GLTERM 
  The OpenGL context is going to be destroyed. Might be called several times.
* GS_EVENT_TICK 
  XXX
* GS_EVENT_DRAW 
  XXX
* GS_EVENT_RESIZE 
  Called when the screen is resized. Might be called several times.
* GS_EVENT_DOWN 
  A key/button has been pressed.
* GS_EVENT_UP 
  A key/button has been released.
* GS_EVENT_UNICODE 
  Called when the user enters text.
* GS_EVENT_MOTION 
  The mouse moved.
* GS_EVENT_CLOSE 
  The application is about to close.
  

5 License 
----------
  Copyright (c) 2011, Jorge Acereda Maci√°
  All rights reserved.

  Redistribution and use in source and binary forms, with or without
  modification, are permitted provided that the following conditions are
  met:
        
  1. Redistributions of source code must retain the above copyright
     notice, this list of conditions and the following disclaimer.
        
  2. Redistributions in binary form must reproduce the above copyright
     notice, this list of conditions and the following disclaimer in
     the documentation and/or other materials provided with the
     distribution.

  3. Neither the name of the author nor the names of its contributors
     may be used to endorse or promote products derived from this
     software without specific prior written permission.

  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
  "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
  A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT
  OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
  SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
  LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
  THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
  OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
